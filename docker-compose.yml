version: "3.8"

services:
  postgres:
    image: debezium/postgres:14
    platform: linux/amd64
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=business_db
      # Enable logical replication for Debezium
      - POSTGRES_CONFIG_wal_level=logical
      - POSTGRES_CONFIG_max_wal_senders=4
      - POSTGRES_CONFIG_max_replication_slots=4
    volumes:
      - postgres_data:/var/lib/postgres/data
    networks:
      - data_platform_network
  
  # For Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    platform: linux/amd64
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - data_platform_network

  # For brokering message
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    platform: linux/amd64
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAYS_MS=0
    networks:
      - data_platform_network
  
  # For managing AVRO schemas
  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    platform: linux/amd64
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVICES=kafka:9092
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENER=http://0.0.0.0:8081
    networks:
      - data_platform_network
  
  # For capturing changse from PostgreSQL
  kafka-connect:
    image: debezium/connect:2.1
    platform: linux/amd64
    container_name: kafka-connect
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=kafka-connect-group
      - CONFIG_STORAGE_TOPIC=connect-configs
      - OFFSET_STORAGE_TOPIC=connect-offsets
      - STATUS_STORAGE_TOPIC=connect-statuses
      - KEY_CONVERTER=io.confluent.connect.avro.AvroConverter
      - VALUE_CONVERTER=io.confluent.connect.avri.AvroConverter
      - KEY_CONVERTER_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - VALUE_CONVERTER_SCHEMA_REGISTRY_URL=http:///schema-registry:8081
      - CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=true
      - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=true
    networks:
      - data_platform_network

  debezium-config:
    build:
      context: .
      dockerfile: Dockerfile.debezium-config
    container_name: debezium-config
    depends_on:
      - kafka-connect
      - postgres
      - business-simulator
    networks:
      - data_platform_network

  kafka-consumer:
    build:
      context: .
      dockerfile: Dockerfile.kafka-consumer
    container_name: kafka-consumer
    depends_on:
      - kafka
      - schema-registry
      - debezium-config
    networks:
      - data_platform_network

  business-simulator:
    build:
      context: .
      dockerfile: Dockerfile.simulator
    container_name: business_simulator
    depends_on:
      - postgres
    volumes:
      - ./data:/app/data
      - ./scripts:/app/scripts
    environment:
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=business_db
      - DATA_DIR=/app/data
    networks:
      - data_platform_network
  
  data-generaotr:
    build:
      context: .
      dockerfile: Dockerfile.data-generator
    container_name: data-generaotr
    depends_on:
      - postgres
      - business-simulator
    environment:
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=business_db
    networks:
      - data_platform_network

  spark:
    image: bitnami/spark:3.3.1
    container_name: spark
    platform: linux/amd64
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRUPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENVRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - data_platform_network
    
  spark-worker:
    image: bitnami/spark:3.3.1
    container_name: spark-worker
    platform: linux/amd64
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRUPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENVRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8082:8082"
    networks:
      - data_platform_network

  spark-processor:
    build:
      context: .
      dockerfile: Dockerfile.spark-processor
    container_name: spark-processor
    platform: linux/amd64
    depends_on:
      - spark
      - kafka
      - schema-registry
      - debezium-config
    networks:
      - data_platform_network

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - data_platform_network
  
  mc:
    image: minio/mc
    container_name: mc
    depends_on:
      - minio
    environment:
      - MC_HOST_minio=http://minioadmin:minioadmin@minio:9000
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc mb minio/delta-lake;
      /usr/bin/mc policy set public minio/delta-lake;
      exit 0;
      "
    networks:
      - data_platform_network

  minio-reader:
    build:
      context: .
      dockerfile: Dockerfile.minio-reader
    container_name: minio-reade
    platform: linux/amd64
    depends_on:
      - spark
      - minio
      - spark-processor
    networks:
      - data_platform_network

networks:
  data_platform_network:
    driver: bridge

volumes:
  postgres_data:
  minio_data: